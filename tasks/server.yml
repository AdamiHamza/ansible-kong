---

# Debian
- name: Download kong deb package | Debian
  get_url: url="{{ kong_deb_pkg_url }}" dest=/var/tmp validate_certs=no
  when: ansible_os_family|lower == 'debian'

- name: Install kong prerequisites (Debian/Ubuntu only)
  apt: 
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items: "{{ kong_prereqs }}"
  when: ansible_os_family|lower == 'debian'

- name: Install kong | Debian
  apt:
    deb:   "/var/tmp/kong-{{ kong_version }}.{{ ansible_distribution_release }}_all.deb"
    state: present
  when: ansible_os_family|lower == 'debian'

# RedHat
- name: Download kong rpm package | RedHat
  get_url: url="{{ kong_rpm_pkg_url }}" dest=/var/tmp validate_certs=no
  when: ansible_os_family|lower == 'redhat'

- name: Install kong | RedHat
  yum: 
    name: "/var/tmp/kong-{{ kong_version }}.el7.noarch.rpm"
    disable_gpg_check: yes
    state: present
  when: ansible_os_family|lower == 'redhat'

- name: Create kong config file
  template: src=kong.yml.j2 dest="{{ kong_conf_dir }}/kong.yml" owner=root group=root mode=0644
  notify: Restart kong

- name: Ensure kong nginx working dir has appropriate permissions
  file: path="{{ kong_nginx_working_dir }}" owner=root group=root mode=0755

- name: Check kong running status
  shell: kong status || true
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  register: run

- name: Start kong
  shell: ulimit -n "{{ kong_max_files_limit }}" && kong start
  environment:
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
  when: run.stdout.find('Kong is not running') != -1
  register: start

#- debug: var=start.stdout_lines

# ToDo:
#   - consider running kong as non-root user
#   - consider writing a startup script for kong
