---

- name: Initialise consumer_exists variable
  set_fact:
    consumer_exists: false

- name: Set consumer_exists if consumer object already exists
  set_fact:
    consumer_exists: true
  when: kong_consumer_config.username in consumers.json.data|map(attribute='username')

- name: Add consumer object to kong
  uri:
    url:    "{{ kong_admin_api_url|default('http://localhost:8001') }}/consumers/"
    method: POST
    body:   "{{ kong_consumer_config }}"
    status_code: "201"
    body_format: json
  register: c_add
  when: not consumer_exists

- debug: var=c_add

- debug: msg="{{ kong_consumer_config.username }} consumer object already exists - ({{ consumers.json.data|map(attribute='username')|join(',') }})"
  when: consumer_exists

## Note: Why remove "name" attribute from request body to update consumer object?
##       Request fails with 409 status code if value of name in body matches existing name
##       E.g
##          < HTTP/1.1 409 Conflict
##          {
##            "message": "UNIQUE violation detected on '{name=\"svcAA\"}'",
##            "code": 5,
##            "name": "unique constraint violation",
##            "fields": {
##              "name": "svcAA"
##            }
##          }
#
#- name: Initialise kong_consumer_obj_update variable
#  set_fact:
#    kong_consumer_obj_update: {}
#
#- name: Set kong consumer object config for update
#  set_fact:
#    kong_consumer_obj_update: "{{ kong_consumer_obj_update|combine({ item.key: item.value })}}"
#  when: item.key != 'name'
#  with_dict: "{{ kong_consumer_config.consumer }}"

- name: Update consumer object configured in kong
  uri:
    url:    "{{ kong_admin_api_url|default('http://localhost:8001') }}/consumers/{{ kong_consumer_config.username }}"
    method: PATCH
    #body:   "{{ kong_consumer_obj_update }}"
    body:   "{{ kong_consumer_config }}"
    status_code: "200"
    body_format: json
  register: c_update
  when: consumer_exists

- debug: var=c_update
